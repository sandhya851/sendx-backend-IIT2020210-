package storage

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"sync"
)

var mu sync.Mutex

func SaveCrawledData(url, content string) error {
	mu.Lock()
	defer mu.Unlock()

	if err := createDataDirectory(); err != nil {
		return err
	}

	filePath := getFilePath(url)
	if err := ioutil.WriteFile(filePath, []byte(content), 0644); err != nil {
		return fmt.Errorf("error saving crawled data: %v", err)
	}

	return nil
}

func GetCrawledData(url string) (string, error) {
	mu.Lock()
	defer mu.Unlock()

	filePath := getFilePath(url)
	content, err := ioutil.ReadFile(filePath)
	if err != nil {
		return "", fmt.Errorf("error reading crawled data: %v", err)
	}

	return string(content), nil
}

func createDataDirectory() error {
	err := os.MkdirAll("data", os.ModePerm)
	if err != nil {
		return fmt.Errorf("error creating data directory: %v", err)
	}
	return nil
}

func getFilePath(url string) string {
	// Sanitize the URL to prevent directory traversal attacks
	safeURL := sanitizeURL(url)
	return filepath.Join("data", safeURL+".txt")
}

func sanitizeURL(url string) string {
	// Replace non-alphanumeric characters with underscores
	return strings.Map(func(r rune) rune {
		if r >= 'A' && r <= 'Z' || r >= 'a' && r <= 'z' || r >= '0' && r <= '9' {
			return r
		}
		return '_'
	}, url)
}
